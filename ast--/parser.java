
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\003\004" +
    "\000\002\003\005\000\002\004\007\000\002\004\010\000" +
    "\002\005\003\000\002\005\005\000\002\006\003\000\002" +
    "\006\005\000\002\007\003\000\002\007\005\000\002\010" +
    "\003\000\002\010\005\000\002\011\003\000\002\011\005" +
    "\000\002\060\003\000\002\060\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\006\000\002" +
    "\012\007\000\002\012\004\000\002\061\005\000\002\061" +
    "\006\000\002\013\003\000\002\013\003\000\002\014\004" +
    "\000\002\015\005\000\002\015\006\000\002\015\003\000" +
    "\002\015\004\000\002\062\005\000\002\062\006\000\002" +
    "\016\003\000\002\016\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\003\000\002\020\004\000\002\021\004\000" +
    "\002\021\005\000\002\021\005\000\002\021\006\000\002" +
    "\063\003\000\002\063\004\000\002\064\003\000\002\064" +
    "\004\000\002\024\007\000\002\024\011\000\002\022\007" +
    "\000\002\022\010\000\002\022\011\000\002\022\011\000" +
    "\002\022\012\000\002\022\011\000\002\022\012\000\002" +
    "\022\012\000\002\022\013\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\005\000\002\025\003" +
    "\000\002\025\005\000\002\026\003\000\002\026\005\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\005\000\002\032\003\000\002\032\005\000\002" +
    "\033\003\000\002\033\005\000\002\034\003\000\002\034" +
    "\005\000\002\035\003\000\002\035\005\000\002\036\003" +
    "\000\002\036\005\000\002\037\003\000\002\037\003\000" +
    "\002\040\003\000\002\040\005\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\003\000\002\042\005\000\002\043\003\000\002\043\003" +
    "\000\002\044\003\000\002\044\005\000\002\045\003\000" +
    "\002\045\003\000\002\046\003\000\002\046\005\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\050" +
    "\003\000\002\050\006\000\002\051\003\000\002\051\004" +
    "\000\002\052\003\000\002\052\004\000\002\052\004\000" +
    "\002\052\004\000\002\052\004\000\002\052\006\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\054\003" +
    "\000\002\054\004\000\002\055\005\000\002\055\004\000" +
    "\002\055\005\000\002\055\004\000\002\055\004\000\002" +
    "\055\003\000\002\055\003\000\002\056\003\000\002\056" +
    "\005\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\005\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\014\004\012\005\015\006\004\007\011\010" +
    "\010\001\002\000\012\022\uffea\023\uffea\032\uffea\074\uffea" +
    "\001\002\000\006\026\366\074\021\001\002\000\016\002" +
    "\001\004\001\005\001\006\001\007\001\010\001\001\002" +
    "\000\016\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\001\002\000\006\026\uffe3\074\uffe3\001\002\000\006" +
    "\026\uffe4\074\uffe4\001\002\000\012\022\uffec\023\uffec\032" +
    "\uffec\074\uffec\001\002\000\010\023\026\032\024\074\021" +
    "\001\002\000\016\002\020\004\012\005\015\006\004\007" +
    "\011\010\010\001\002\000\012\022\uffeb\023\uffeb\032\uffeb" +
    "\074\uffeb\001\002\000\016\002\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\001\002\000\016\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\001\002\000\004\002" +
    "\000\001\002\000\126\021\uff6a\022\uff6a\023\uff6a\024\uff6a" +
    "\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033" +
    "\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a" +
    "\042\uff6a\043\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052" +
    "\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\060\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a\067" +
    "\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\001\002" +
    "\000\010\023\ufff2\024\ufff2\025\354\001\002\000\016\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\001\002" +
    "\000\006\032\024\074\021\001\002\000\006\023\ufff4\024" +
    "\ufff4\001\002\000\074\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\026\ufffc\027\ufffc" +
    "\032\ufffc\035\ufffc\040\ufffc\041\ufffc\044\ufffc\045\ufffc\057" +
    "\ufffc\060\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\001\002" +
    "\000\006\023\351\024\350\001\002\000\014\021\033\023" +
    "\uffdf\024\uffdf\025\uffdf\030\031\001\002\000\036\020\056" +
    "\021\066\032\075\035\055\040\076\041\124\044\105\045" +
    "\057\057\065\060\121\074\021\075\106\076\116\077\100" +
    "\001\002\000\014\022\uffde\023\uffde\024\uffde\025\uffde\030" +
    "\342\001\002\000\016\004\012\005\015\006\004\007\011" +
    "\010\010\022\034\001\002\000\012\023\uffe1\024\uffe1\025" +
    "\uffe1\026\043\001\002\000\006\022\ufff8\024\ufff8\001\002" +
    "\000\006\032\024\074\021\001\002\000\006\022\041\024" +
    "\040\001\002\000\014\004\012\005\015\006\004\007\011" +
    "\010\010\001\002\000\012\023\uffe0\024\uffe0\025\uffe0\026" +
    "\043\001\002\000\016\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\001\002\000\072\004\012\005\015\006" +
    "\004\007\011\010\010\011\067\013\113\014\052\015\047" +
    "\016\101\017\072\020\056\021\066\023\050\026\043\027" +
    "\112\032\075\035\055\040\076\041\124\044\105\045\057" +
    "\057\065\060\121\074\021\075\106\076\116\077\100\001" +
    "\002\000\052\022\uff97\023\uff97\024\uff97\027\uff97\031\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\142\041" +
    "\141\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\001\002\000\062\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\023\uffd6\026\uffd6\027\uffd6\032\uffd6\035\uffd6\040\uffd6\041" +
    "\uffd6\044\uffd6\045\uffd6\057\uffd6\060\uffd6\074\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\001\002\000\062\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\023\uffd5\026\uffd5\027\uffd5\032\uffd5\035\uffd5\040\uffd5\041" +
    "\uffd5\044\uffd5\045\uffd5\057\uffd5\060\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\077\uffd5\001\002\000\004\023\336\001\002\000" +
    "\062\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\023\uffd4\026\uffd4\027\uffd4\032" +
    "\uffd4\035\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4\057\uffd4" +
    "\060\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\001\002\000" +
    "\062\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\023\uffd7\026\uffd7\027\uffd7\032" +
    "\uffd7\035\uffd7\040\uffd7\041\uffd7\044\uffd7\045\uffd7\057\uffd7" +
    "\060\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\001\002\000" +
    "\004\021\300\001\002\000\122\021\uff6f\022\uff6f\023\uff6f" +
    "\024\uff6f\025\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033" +
    "\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f" +
    "\042\uff6f\043\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f" +
    "\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067" +
    "\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\001\002\000\122" +
    "\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\027\uff7a\030" +
    "\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a" +
    "\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\046\uff7a\047" +
    "\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a" +
    "\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064" +
    "\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a" +
    "\073\uff7a\001\002\000\036\020\uff80\021\uff80\032\uff80\035" +
    "\uff80\040\uff80\041\uff80\044\uff80\045\uff80\057\uff80\060\uff80" +
    "\074\uff80\075\uff80\076\uff80\077\uff80\001\002\000\036\020" +
    "\056\021\275\032\075\035\055\040\076\041\124\044\105" +
    "\045\057\057\065\060\121\074\021\075\106\076\116\077" +
    "\100\001\002\000\036\020\uff7b\021\uff7b\032\uff7b\035\uff7b" +
    "\040\uff7b\041\uff7b\044\uff7b\045\uff7b\057\uff7b\060\uff7b\074" +
    "\uff7b\075\uff7b\076\uff7b\077\uff7b\001\002\000\016\022\uffb9" +
    "\023\uffb9\024\uffb9\027\uffb9\031\uffb9\047\272\001\002\000" +
    "\032\022\uffa3\023\uffa3\024\uffa3\027\uffa3\031\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\047\uffa3\050\uffa3\051\174\052\176\001" +
    "\002\000\024\022\uffa7\023\uffa7\024\uffa7\027\uffa7\031\uffa7" +
    "\033\uffa7\034\170\047\uffa7\050\uffa7\001\002\000\072\004" +
    "\012\005\015\006\004\007\011\010\010\011\067\013\113" +
    "\014\052\015\047\016\101\017\072\020\056\021\066\023" +
    "\050\026\043\027\266\032\075\035\055\040\076\041\124" +
    "\044\105\045\057\057\065\060\121\074\021\075\106\076" +
    "\116\077\100\001\002\000\060\022\uff8f\023\uff8f\024\uff8f" +
    "\027\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\047\uff8f" +
    "\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056" +
    "\uff8f\001\002\000\036\020\056\021\153\032\075\035\055" +
    "\040\076\041\124\044\105\045\057\057\065\060\121\074" +
    "\021\075\106\076\116\077\100\001\002\000\050\004\012" +
    "\005\015\006\004\007\011\010\010\020\056\021\066\032" +
    "\075\035\055\040\076\041\124\044\105\045\057\057\065" +
    "\060\121\074\021\075\106\076\116\077\100\001\002\000" +
    "\004\021\252\001\002\000\006\023\251\024\155\001\002" +
    "\000\060\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\023\uffcc\026\uffcc\027\uffcc\032\uffcc" +
    "\035\uffcc\040\uffcc\041\uffcc\044\uffcc\045\uffcc\057\uffcc\060" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\001\002\000\040" +
    "\020\056\021\066\023\246\032\075\035\055\040\076\041" +
    "\124\044\105\045\057\057\065\060\121\074\021\075\106" +
    "\076\116\077\100\001\002\000\106\022\uff8a\023\uff8a\024" +
    "\uff8a\025\233\027\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\062\232\063\236\064\243\065\234\066" +
    "\235\067\244\070\241\071\237\072\231\073\242\001\002" +
    "\000\010\023\026\032\024\074\021\001\002\000\036\020" +
    "\uff7f\021\uff7f\032\uff7f\035\uff7f\040\uff7f\041\uff7f\044\uff7f" +
    "\045\uff7f\057\uff7f\060\uff7f\074\uff7f\075\uff7f\076\uff7f\077" +
    "\uff7f\001\002\000\036\020\uff7e\021\uff7e\032\uff7e\035\uff7e" +
    "\040\uff7e\041\uff7e\044\uff7e\045\uff7e\057\uff7e\060\uff7e\074" +
    "\uff7e\075\uff7e\076\uff7e\077\uff7e\001\002\000\062\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\023\uffd8\026\uffd8\027\uffd8\032\uffd8\035\uffd8" +
    "\040\uffd8\041\uffd8\044\uffd8\045\uffd8\057\uffd8\060\uffd8\074" +
    "\uffd8\075\uffd8\076\uffd8\077\uffd8\001\002\000\122\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\027\uff6c\030\uff6c\031" +
    "\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c" +
    "\040\uff6c\041\uff6c\042\uff6c\043\uff6c\046\uff6c\047\uff6c\050" +
    "\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c" +
    "\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065" +
    "\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c" +
    "\001\002\000\004\023\223\001\002\000\122\021\206\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\027\uff86\030\202\031\uff86" +
    "\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\046\210\047\uff86\050\uff86" +
    "\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057" +
    "\203\060\205\061\204\062\uff86\063\uff86\064\uff86\065\uff86" +
    "\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\001" +
    "\002\000\020\022\uffab\023\uffab\024\uffab\027\uffab\031\uffab" +
    "\047\uffab\050\200\001\002\000\046\022\uff9d\023\uff9d\024" +
    "\uff9d\027\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\137\056\135\001\002\000\036\020\uff7c\021\uff7c" +
    "\032\uff7c\035\uff7c\040\uff7c\041\uff7c\044\uff7c\045\uff7c\057" +
    "\uff7c\060\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\001\002" +
    "\000\122\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\027" +
    "\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e" +
    "\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\046" +
    "\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e" +
    "\055\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063" +
    "\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e" +
    "\072\uff6e\073\uff6e\001\002\000\026\022\uffa5\023\uffa5\024" +
    "\uffa5\027\uffa5\031\uffa5\033\uffa5\034\uffa5\035\172\047\uffa5" +
    "\050\uffa5\001\002\000\022\022\uffa9\023\uffa9\024\uffa9\027" +
    "\uffa9\031\uffa9\033\166\047\uffa9\050\uffa9\001\002\000\012" +
    "\022\uffbb\023\uffbb\024\uffbb\031\uffbb\001\002\000\076\002" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\023\uffd2\026\uffd2\027\uffd2\032\uffd2\035\uffd2" +
    "\040\uffd2\041\uffd2\044\uffd2\045\uffd2\057\uffd2\060\uffd2\074" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\001\002\000\004\021\162" +
    "\001\002\000\060\022\uff93\023\uff93\024\uff93\027\uff93\031" +
    "\uff93\032\147\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\150\043\145\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\001\002" +
    "\000\062\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\026\uffd9\027\uffd9" +
    "\032\uffd9\035\uffd9\040\uffd9\041\uffd9\044\uffd9\045\uffd9\057" +
    "\uffd9\060\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\001\002" +
    "\000\122\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\027" +
    "\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\046" +
    "\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d" +
    "\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063" +
    "\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\001\002\000\060\011\067\013\113\014" +
    "\052\015\047\016\101\017\072\020\056\021\066\023\050" +
    "\026\043\027\161\032\075\035\055\040\076\041\124\044" +
    "\105\045\057\057\065\060\121\074\021\075\106\076\116" +
    "\077\100\001\002\000\072\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\023\uffce\026\uffce\027\uffce\032" +
    "\uffce\035\uffce\040\uffce\041\uffce\044\uffce\045\uffce\057\uffce" +
    "\060\uffce\074\uffce\075\uffce\076\uffce\077\uffce\001\002\000" +
    "\036\020\056\021\153\032\075\035\055\040\076\041\124" +
    "\044\105\045\057\057\065\060\121\074\021\075\106\076" +
    "\116\077\100\001\002\000\042\022\uffa1\023\uffa1\024\uffa1" +
    "\027\uffa1\031\uffa1\033\uffa1\034\uffa1\035\uffa1\036\127\037" +
    "\130\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\132\054\133" +
    "\001\002\000\036\020\056\021\066\032\075\035\055\040" +
    "\076\041\124\044\105\045\057\057\065\060\121\074\021" +
    "\075\106\076\116\077\100\001\002\000\036\020\uff7d\021" +
    "\uff7d\032\uff7d\035\uff7d\040\uff7d\041\uff7d\044\uff7d\045\uff7d" +
    "\057\uff7d\060\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\001" +
    "\002\000\106\022\uff83\023\uff83\024\uff83\025\uff83\027\uff83" +
    "\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037" +
    "\uff83\040\uff83\041\uff83\042\uff83\043\uff83\047\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\062" +
    "\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83" +
    "\071\uff83\072\uff83\073\uff83\001\002\000\106\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\027\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042" +
    "\uff8a\043\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\056\uff8a\062\uff8a\063\uff8a\064\uff8a\065" +
    "\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a" +
    "\001\002\000\036\020\uff9b\021\uff9b\032\uff9b\035\uff9b\040" +
    "\uff9b\041\uff9b\044\uff9b\045\uff9b\057\uff9b\060\uff9b\074\uff9b" +
    "\075\uff9b\076\uff9b\077\uff9b\001\002\000\036\020\uff9a\021" +
    "\uff9a\032\uff9a\035\uff9a\040\uff9a\041\uff9a\044\uff9a\045\uff9a" +
    "\057\uff9a\060\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\001" +
    "\002\000\036\020\056\021\066\032\075\035\055\040\076" +
    "\041\124\044\105\045\057\057\065\060\121\074\021\075" +
    "\106\076\116\077\100\001\002\000\036\020\uff99\021\uff99" +
    "\032\uff99\035\uff99\040\uff99\041\uff99\044\uff99\045\uff99\057" +
    "\uff99\060\uff99\074\uff99\075\uff99\076\uff99\077\uff99\001\002" +
    "\000\036\020\uff98\021\uff98\032\uff98\035\uff98\040\uff98\041" +
    "\uff98\044\uff98\045\uff98\057\uff98\060\uff98\074\uff98\075\uff98" +
    "\076\uff98\077\uff98\001\002\000\046\022\uff9c\023\uff9c\024" +
    "\uff9c\027\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\137\056\135\001\002\000\036\020\uff94\021\uff94" +
    "\032\uff94\035\uff94\040\uff94\041\uff94\044\uff94\045\uff94\057" +
    "\uff94\060\uff94\074\uff94\075\uff94\076\uff94\077\uff94\001\002" +
    "\000\036\020\056\021\066\032\075\035\055\040\076\041" +
    "\124\044\105\045\057\057\065\060\121\074\021\075\106" +
    "\076\116\077\100\001\002\000\036\020\uff95\021\uff95\032" +
    "\uff95\035\uff95\040\uff95\041\uff95\044\uff95\045\uff95\057\uff95" +
    "\060\uff95\074\uff95\075\uff95\076\uff95\077\uff95\001\002\000" +
    "\052\022\uff96\023\uff96\024\uff96\027\uff96\031\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\040\142\041\141\047" +
    "\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\056\uff96\001\002\000\036\020\uff90\021\uff90\032\uff90\035" +
    "\uff90\040\uff90\041\uff90\044\uff90\045\uff90\057\uff90\060\uff90" +
    "\074\uff90\075\uff90\076\uff90\077\uff90\001\002\000\036\020" +
    "\uff91\021\uff91\032\uff91\035\uff91\040\uff91\041\uff91\044\uff91" +
    "\045\uff91\057\uff91\060\uff91\074\uff91\075\uff91\076\uff91\077" +
    "\uff91\001\002\000\036\020\056\021\066\032\075\035\055" +
    "\040\076\041\124\044\105\045\057\057\065\060\121\074" +
    "\021\075\106\076\116\077\100\001\002\000\060\022\uff92" +
    "\023\uff92\024\uff92\027\uff92\031\uff92\032\147\033\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\150" +
    "\043\145\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054" +
    "\uff92\055\uff92\056\uff92\001\002\000\036\020\uff8b\021\uff8b" +
    "\032\uff8b\035\uff8b\040\uff8b\041\uff8b\044\uff8b\045\uff8b\057" +
    "\uff8b\060\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\001\002" +
    "\000\036\020\056\021\066\032\075\035\055\040\076\041" +
    "\124\044\105\045\057\057\065\060\121\074\021\075\106" +
    "\076\116\077\100\001\002\000\036\020\uff8d\021\uff8d\032" +
    "\uff8d\035\uff8d\040\uff8d\041\uff8d\044\uff8d\045\uff8d\057\uff8d" +
    "\060\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\001\002\000" +
    "\036\020\uff8c\021\uff8c\032\uff8c\035\uff8c\040\uff8c\041\uff8c" +
    "\044\uff8c\045\uff8c\057\uff8c\060\uff8c\074\uff8c\075\uff8c\076" +
    "\uff8c\077\uff8c\001\002\000\060\022\uff8e\023\uff8e\024\uff8e" +
    "\027\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056" +
    "\uff8e\001\002\000\106\022\uff84\023\uff84\024\uff84\025\uff84" +
    "\027\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\047\uff84" +
    "\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84" +
    "\070\uff84\071\uff84\072\uff84\073\uff84\001\002\000\036\020" +
    "\056\021\066\032\075\035\055\040\076\041\124\044\105" +
    "\045\057\057\065\060\121\074\021\075\106\076\116\077" +
    "\100\001\002\000\006\022\156\024\155\001\002\000\036" +
    "\020\056\021\066\032\075\035\055\040\076\041\124\044" +
    "\105\045\057\057\065\060\121\074\021\075\106\076\116" +
    "\077\100\001\002\000\122\021\uff6b\022\uff6b\023\uff6b\024" +
    "\uff6b\025\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b" +
    "\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042" +
    "\uff6b\043\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b" +
    "\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061" +
    "\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b" +
    "\070\uff6b\071\uff6b\072\uff6b\073\uff6b\001\002\000\012\022" +
    "\uffba\023\uffba\024\uffba\031\uffba\001\002\000\060\011\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\023\uffcb\026\uffcb\027\uffcb\032\uffcb\035\uffcb\040\uffcb" +
    "\041\uffcb\044\uffcb\045\uffcb\057\uffcb\060\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\001\002\000\076\002\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\023\uffd0\026\uffd0\027\uffd0\032\uffd0\035\uffd0\040\uffd0\041" +
    "\uffd0\044\uffd0\045\uffd0\057\uffd0\060\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\001\002\000\036\020\056\021\066\032" +
    "\075\035\055\040\076\041\124\044\105\045\057\057\065" +
    "\060\121\074\021\075\106\076\116\077\100\001\002\000" +
    "\006\022\164\024\155\001\002\000\056\011\067\013\113" +
    "\014\052\015\047\016\101\017\072\020\056\021\066\023" +
    "\050\026\043\032\075\035\055\040\076\041\124\044\105" +
    "\045\057\057\065\060\121\074\021\075\106\076\116\077" +
    "\100\001\002\000\062\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\026" +
    "\uffc8\027\uffc8\032\uffc8\035\uffc8\040\uffc8\041\uffc8\044\uffc8" +
    "\045\uffc8\057\uffc8\060\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\001\002\000\036\020\056\021\066\032\075\035\055" +
    "\040\076\041\124\044\105\045\057\057\065\060\121\074" +
    "\021\075\106\076\116\077\100\001\002\000\024\022\uffa6" +
    "\023\uffa6\024\uffa6\027\uffa6\031\uffa6\033\uffa6\034\170\047" +
    "\uffa6\050\uffa6\001\002\000\036\020\056\021\066\032\075" +
    "\035\055\040\076\041\124\044\105\045\057\057\065\060" +
    "\121\074\021\075\106\076\116\077\100\001\002\000\026" +
    "\022\uffa4\023\uffa4\024\uffa4\027\uffa4\031\uffa4\033\uffa4\034" +
    "\uffa4\035\172\047\uffa4\050\uffa4\001\002\000\036\020\056" +
    "\021\066\032\075\035\055\040\076\041\124\044\105\045" +
    "\057\057\065\060\121\074\021\075\106\076\116\077\100" +
    "\001\002\000\032\022\uffa2\023\uffa2\024\uffa2\027\uffa2\031" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\047\uffa2\050\uffa2\051\174" +
    "\052\176\001\002\000\036\020\uff9f\021\uff9f\032\uff9f\035" +
    "\uff9f\040\uff9f\041\uff9f\044\uff9f\045\uff9f\057\uff9f\060\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\077\uff9f\001\002\000\036\020" +
    "\056\021\066\032\075\035\055\040\076\041\124\044\105" +
    "\045\057\057\065\060\121\074\021\075\106\076\116\077" +
    "\100\001\002\000\036\020\uff9e\021\uff9e\032\uff9e\035\uff9e" +
    "\040\uff9e\041\uff9e\044\uff9e\045\uff9e\057\uff9e\060\uff9e\074" +
    "\uff9e\075\uff9e\076\uff9e\077\uff9e\001\002\000\042\022\uffa0" +
    "\023\uffa0\024\uffa0\027\uffa0\031\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\127\037\130\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\132\054\133\001\002\000\036\020\056\021\066\032" +
    "\075\035\055\040\076\041\124\044\105\045\057\057\065" +
    "\060\121\074\021\075\106\076\116\077\100\001\002\000" +
    "\022\022\uffa8\023\uffa8\024\uffa8\027\uffa8\031\uffa8\033\166" +
    "\047\uffa8\050\uffa8\001\002\000\036\020\056\021\066\032" +
    "\075\035\055\040\076\041\124\044\105\045\057\057\065" +
    "\060\121\074\021\075\106\076\116\077\100\001\002\000" +
    "\122\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\027\uff73" +
    "\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\046\uff73" +
    "\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055" +
    "\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73\063\uff73" +
    "\064\uff73\065\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072" +
    "\uff73\073\uff73\001\002\000\004\074\021\001\002\000\122" +
    "\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\027\uff72\030" +
    "\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72" +
    "\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\046\uff72\047" +
    "\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72" +
    "\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064" +
    "\uff72\065\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072\uff72" +
    "\073\uff72\001\002\000\040\020\056\021\066\022\213\032" +
    "\075\035\055\040\076\041\124\044\105\045\057\057\065" +
    "\060\121\074\021\075\106\076\116\077\100\001\002\000" +
    "\122\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\027\uff79" +
    "\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79" +
    "\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072" +
    "\uff79\073\uff79\001\002\000\004\074\021\001\002\000\122" +
    "\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\027\uff75\030" +
    "\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75" +
    "\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\046\uff75\047" +
    "\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75" +
    "\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\063\uff75\064" +
    "\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75" +
    "\073\uff75\001\002\000\006\022\uff71\024\uff71\001\002\000" +
    "\122\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77\027\uff77" +
    "\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\046\uff77" +
    "\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055" +
    "\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77" +
    "\064\uff77\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072" +
    "\uff77\073\uff77\001\002\000\006\022\216\024\215\001\002" +
    "\000\036\020\056\021\066\032\075\035\055\040\076\041" +
    "\124\044\105\045\057\057\065\060\121\074\021\075\106" +
    "\076\116\077\100\001\002\000\122\021\uff76\022\uff76\023" +
    "\uff76\024\uff76\025\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\046\uff76\047\uff76\050\uff76\051\uff76" +
    "\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060" +
    "\uff76\061\uff76\062\uff76\063\uff76\064\uff76\065\uff76\066\uff76" +
    "\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76\001\002\000" +
    "\006\022\uff70\024\uff70\001\002\000\122\021\uff74\022\uff74" +
    "\023\uff74\024\uff74\025\uff74\027\uff74\030\uff74\031\uff74\032" +
    "\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74" +
    "\041\uff74\042\uff74\043\uff74\046\uff74\047\uff74\050\uff74\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74" +
    "\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065\uff74\066" +
    "\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74\001\002" +
    "\000\006\024\155\031\222\001\002\000\122\021\uff78\022" +
    "\uff78\023\uff78\024\uff78\025\uff78\027\uff78\030\uff78\031\uff78" +
    "\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040" +
    "\uff78\041\uff78\042\uff78\043\uff78\046\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057" +
    "\uff78\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78" +
    "\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\001" +
    "\002\000\062\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe\026\uffbe\027" +
    "\uffbe\032\uffbe\035\uffbe\040\uffbe\041\uffbe\044\uffbe\045\uffbe" +
    "\057\uffbe\060\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\001" +
    "\002\000\016\021\225\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\030\031\001\002\000\016\004\012\005\015\006\004\007" +
    "\011\010\010\022\226\001\002\000\012\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\001\002\000\006\022\230\024\040\001" +
    "\002\000\012\022\uffe0\023\uffe0\024\uffe0\025\uffe0\001\002" +
    "\000\036\020\uffae\021\uffae\032\uffae\035\uffae\040\uffae\041" +
    "\uffae\044\uffae\045\uffae\057\uffae\060\uffae\074\uffae\075\uffae" +
    "\076\uffae\077\uffae\001\002\000\036\020\uffb6\021\uffb6\032" +
    "\uffb6\035\uffb6\040\uffb6\041\uffb6\044\uffb6\045\uffb6\057\uffb6" +
    "\060\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\001\002\000" +
    "\036\020\uffb7\021\uffb7\032\uffb7\035\uffb7\040\uffb7\041\uffb7" +
    "\044\uffb7\045\uffb7\057\uffb7\060\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\077\uffb7\001\002\000\036\020\uffb3\021\uffb3\032\uffb3" +
    "\035\uffb3\040\uffb3\041\uffb3\044\uffb3\045\uffb3\057\uffb3\060" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\001\002\000\036" +
    "\020\uffb2\021\uffb2\032\uffb2\035\uffb2\040\uffb2\041\uffb2\044" +
    "\uffb2\045\uffb2\057\uffb2\060\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\001\002\000\036\020\uffb5\021\uffb5\032\uffb5\035" +
    "\uffb5\040\uffb5\041\uffb5\044\uffb5\045\uffb5\057\uffb5\060\uffb5" +
    "\074\uffb5\075\uffb5\076\uffb5\077\uffb5\001\002\000\036\020" +
    "\uffaf\021\uffaf\032\uffaf\035\uffaf\040\uffaf\041\uffaf\044\uffaf" +
    "\045\uffaf\057\uffaf\060\uffaf\074\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\001\002\000\036\020\056\021\066\032\075\035\055" +
    "\040\076\041\124\044\105\045\057\057\065\060\121\074" +
    "\021\075\106\076\116\077\100\001\002\000\036\020\uffb0" +
    "\021\uffb0\032\uffb0\035\uffb0\040\uffb0\041\uffb0\044\uffb0\045" +
    "\uffb0\057\uffb0\060\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0" +
    "\001\002\000\036\020\uffad\021\uffad\032\uffad\035\uffad\040" +
    "\uffad\041\uffad\044\uffad\045\uffad\057\uffad\060\uffad\074\uffad" +
    "\075\uffad\076\uffad\077\uffad\001\002\000\036\020\uffb4\021" +
    "\uffb4\032\uffb4\035\uffb4\040\uffb4\041\uffb4\044\uffb4\045\uffb4" +
    "\057\uffb4\060\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\001" +
    "\002\000\036\020\uffb1\021\uffb1\032\uffb1\035\uffb1\040\uffb1" +
    "\041\uffb1\044\uffb1\045\uffb1\057\uffb1\060\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\001\002\000\014\022\uffb8\023\uffb8" +
    "\024\uffb8\027\uffb8\031\uffb8\001\002\000\062\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\023\uffbd\026\uffbd\027\uffbd\032\uffbd\035\uffbd\040" +
    "\uffbd\041\uffbd\044\uffbd\045\uffbd\057\uffbd\060\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\077\uffbd\001\002\000\006\023\250\024" +
    "\155\001\002\000\062\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\026" +
    "\uffbc\027\uffbc\032\uffbc\035\uffbc\040\uffbc\041\uffbc\044\uffbc" +
    "\045\uffbc\057\uffbc\060\uffbc\074\uffbc\075\uffbc\076\uffbc\077" +
    "\uffbc\001\002\000\062\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\026" +
    "\uffd3\027\uffd3\032\uffd3\035\uffd3\040\uffd3\041\uffd3\044\uffd3" +
    "\045\uffd3\057\uffd3\060\uffd3\074\uffd3\075\uffd3\076\uffd3\077" +
    "\uffd3\001\002\000\036\020\056\021\066\032\075\035\055" +
    "\040\076\041\124\044\105\045\057\057\065\060\121\074" +
    "\021\075\106\076\116\077\100\001\002\000\006\022\254" +
    "\024\155\001\002\000\056\011\067\013\113\014\052\015" +
    "\047\016\101\017\072\020\056\021\066\023\050\026\043" +
    "\032\075\035\055\040\076\041\124\044\105\045\057\057" +
    "\065\060\121\074\021\075\106\076\116\077\100\001\002" +
    "\000\062\011\uffca\012\256\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\023\uffca\026\uffca\027\uffca" +
    "\032\uffca\035\uffca\040\uffca\041\uffca\044\uffca\045\uffca\057" +
    "\uffca\060\uffca\074\uffca\075\uffca\076\uffca\077\uffca\001\002" +
    "\000\056\011\067\013\113\014\052\015\047\016\101\017" +
    "\072\020\056\021\066\023\050\026\043\032\075\035\055" +
    "\040\076\041\124\044\105\045\057\057\065\060\121\074" +
    "\021\075\106\076\116\077\100\001\002\000\062\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\023\uffc9\026\uffc9\027\uffc9\032\uffc9\035\uffc9" +
    "\040\uffc9\041\uffc9\044\uffc9\045\uffc9\057\uffc9\060\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\077\uffc9\001\002\000\006\022\uff88" +
    "\032\uff88\001\002\000\006\022\263\032\262\001\002\000" +
    "\006\022\uff87\032\uff87\001\002\000\036\020\056\021\066" +
    "\032\075\035\055\040\076\041\124\044\105\045\057\057" +
    "\065\060\121\074\021\075\106\076\116\077\100\001\002" +
    "\000\106\022\uff89\023\uff89\024\uff89\025\uff89\027\uff89\031" +
    "\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\042\uff89\043\uff89\047\uff89\050\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\062\uff89" +
    "\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071" +
    "\uff89\072\uff89\073\uff89\001\002\000\106\022\uff85\023\uff85" +
    "\024\uff85\025\uff85\027\uff85\031\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\055\uff85\056\uff85\062\uff85\063\uff85\064\uff85\065\uff85" +
    "\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\001" +
    "\002\000\076\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\026\uffd1\027\uffd1" +
    "\032\uffd1\035\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1\057" +
    "\uffd1\060\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002" +
    "\000\060\011\067\013\113\014\052\015\047\016\101\017" +
    "\072\020\056\021\066\023\050\026\043\027\271\032\075" +
    "\035\055\040\076\041\124\044\105\045\057\057\065\060" +
    "\121\074\021\075\106\076\116\077\100\001\002\000\072" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\023\uffcd\026\uffcd\027\uffcd\032\uffcd\035\uffcd\040\uffcd\041" +
    "\uffcd\044\uffcd\045\uffcd\057\uffcd\060\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\001\002\000\076\002\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023" +
    "\uffcf\026\uffcf\027\uffcf\032\uffcf\035\uffcf\040\uffcf\041\uffcf" +
    "\044\uffcf\045\uffcf\057\uffcf\060\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\001\002\000\036\020\056\021\066\032\075" +
    "\035\055\040\076\041\124\044\105\045\057\057\065\060" +
    "\121\074\021\075\106\076\116\077\100\001\002\000\020" +
    "\022\uffaa\023\uffaa\024\uffaa\027\uffaa\031\uffaa\047\uffaa\050" +
    "\200\001\002\000\106\022\uff82\023\uff82\024\uff82\025\uff82" +
    "\027\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036" +
    "\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\047\uff82" +
    "\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056" +
    "\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82" +
    "\070\uff82\071\uff82\072\uff82\073\uff82\001\002\000\050\004" +
    "\012\005\015\006\004\007\011\010\010\020\056\021\066" +
    "\032\075\035\055\040\076\041\124\044\105\045\057\057" +
    "\065\060\121\074\021\075\106\076\116\077\100\001\002" +
    "\000\006\022\277\032\262\001\002\000\106\022\uff81\023" +
    "\uff81\024\uff81\025\uff81\027\uff81\031\uff81\032\uff81\033\uff81" +
    "\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\043\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\062\uff81\063\uff81\064\uff81\065" +
    "\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81" +
    "\001\002\000\040\020\056\021\066\023\301\032\075\035" +
    "\055\040\076\041\124\044\105\045\057\057\065\060\121" +
    "\074\021\075\106\076\116\077\100\001\002\000\040\020" +
    "\056\021\066\023\321\032\075\035\055\040\076\041\124" +
    "\044\105\045\057\057\065\060\121\074\021\075\106\076" +
    "\116\077\100\001\002\000\006\023\303\024\155\001\002" +
    "\000\040\020\056\021\066\023\304\032\075\035\055\040" +
    "\076\041\124\044\105\045\057\057\065\060\121\074\021" +
    "\075\106\076\116\077\100\001\002\000\040\020\056\021" +
    "\066\022\314\032\075\035\055\040\076\041\124\044\105" +
    "\045\057\057\065\060\121\074\021\075\106\076\116\077" +
    "\100\001\002\000\006\023\306\024\155\001\002\000\040" +
    "\020\056\021\066\022\307\032\075\035\055\040\076\041" +
    "\124\044\105\045\057\057\065\060\121\074\021\075\106" +
    "\076\116\077\100\001\002\000\056\011\067\013\113\014" +
    "\052\015\047\016\101\017\072\020\056\021\066\023\050" +
    "\026\043\032\075\035\055\040\076\041\124\044\105\045" +
    "\057\057\065\060\121\074\021\075\106\076\116\077\100" +
    "\001\002\000\006\022\311\024\155\001\002\000\056\011" +
    "\067\013\113\014\052\015\047\016\101\017\072\020\056" +
    "\021\066\023\050\026\043\032\075\035\055\040\076\041" +
    "\124\044\105\045\057\057\065\060\121\074\021\075\106" +
    "\076\116\077\100\001\002\000\062\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\023\uffc0\026\uffc0\027\uffc0\032\uffc0\035\uffc0\040\uffc0\041" +
    "\uffc0\044\uffc0\045\uffc0\057\uffc0\060\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\077\uffc0\001\002\000\062\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\023\uffc1\026\uffc1\027\uffc1\032\uffc1\035\uffc1\040\uffc1\041" +
    "\uffc1\044\uffc1\045\uffc1\057\uffc1\060\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\001\002\000\056\011\067\013\113\014" +
    "\052\015\047\016\101\017\072\020\056\021\066\023\050" +
    "\026\043\032\075\035\055\040\076\041\124\044\105\045" +
    "\057\057\065\060\121\074\021\075\106\076\116\077\100" +
    "\001\002\000\006\022\316\024\155\001\002\000\056\011" +
    "\067\013\113\014\052\015\047\016\101\017\072\020\056" +
    "\021\066\023\050\026\043\032\075\035\055\040\076\041" +
    "\124\044\105\045\057\057\065\060\121\074\021\075\106" +
    "\076\116\077\100\001\002\000\062\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\023\uffc2\026\uffc2\027\uffc2\032\uffc2\035\uffc2\040\uffc2\041" +
    "\uffc2\044\uffc2\045\uffc2\057\uffc2\060\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\001\002\000\062\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\023\uffc3\026\uffc3\027\uffc3\032\uffc3\035\uffc3\040\uffc3\041" +
    "\uffc3\044\uffc3\045\uffc3\057\uffc3\060\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\001\002\000\040\020\056\021\066\022" +
    "\331\032\075\035\055\040\076\041\124\044\105\045\057" +
    "\057\065\060\121\074\021\075\106\076\116\077\100\001" +
    "\002\000\006\023\323\024\155\001\002\000\040\020\056" +
    "\021\066\022\324\032\075\035\055\040\076\041\124\044" +
    "\105\045\057\057\065\060\121\074\021\075\106\076\116" +
    "\077\100\001\002\000\056\011\067\013\113\014\052\015" +
    "\047\016\101\017\072\020\056\021\066\023\050\026\043" +
    "\032\075\035\055\040\076\041\124\044\105\045\057\057" +
    "\065\060\121\074\021\075\106\076\116\077\100\001\002" +
    "\000\006\022\326\024\155\001\002\000\056\011\067\013" +
    "\113\014\052\015\047\016\101\017\072\020\056\021\066" +
    "\023\050\026\043\032\075\035\055\040\076\041\124\044" +
    "\105\045\057\057\065\060\121\074\021\075\106\076\116" +
    "\077\100\001\002\000\062\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4" +
    "\026\uffc4\027\uffc4\032\uffc4\035\uffc4\040\uffc4\041\uffc4\044" +
    "\uffc4\045\uffc4\057\uffc4\060\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\001\002\000\062\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5" +
    "\026\uffc5\027\uffc5\032\uffc5\035\uffc5\040\uffc5\041\uffc5\044" +
    "\uffc5\045\uffc5\057\uffc5\060\uffc5\074\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\001\002\000\056\011\067\013\113\014\052\015" +
    "\047\016\101\017\072\020\056\021\066\023\050\026\043" +
    "\032\075\035\055\040\076\041\124\044\105\045\057\057" +
    "\065\060\121\074\021\075\106\076\116\077\100\001\002" +
    "\000\006\022\333\024\155\001\002\000\056\011\067\013" +
    "\113\014\052\015\047\016\101\017\072\020\056\021\066" +
    "\023\050\026\043\032\075\035\055\040\076\041\124\044" +
    "\105\045\057\057\065\060\121\074\021\075\106\076\116" +
    "\077\100\001\002\000\062\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6" +
    "\026\uffc6\027\uffc6\032\uffc6\035\uffc6\040\uffc6\041\uffc6\044" +
    "\uffc6\045\uffc6\057\uffc6\060\uffc6\074\uffc6\075\uffc6\076\uffc6" +
    "\077\uffc6\001\002\000\062\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7" +
    "\026\uffc7\027\uffc7\032\uffc7\035\uffc7\040\uffc7\041\uffc7\044" +
    "\uffc7\045\uffc7\057\uffc7\060\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\077\uffc7\001\002\000\062\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf" +
    "\026\uffbf\027\uffbf\032\uffbf\035\uffbf\040\uffbf\041\uffbf\044" +
    "\uffbf\045\uffbf\057\uffbf\060\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\001\002\000\006\022\ufff7\024\ufff7\001\002\000" +
    "\006\022\uffe2\024\uffe2\001\002\000\016\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\001\002\000\036\020" +
    "\056\021\066\032\075\035\055\040\076\041\124\044\105" +
    "\045\057\057\065\060\121\074\021\075\106\076\116\077" +
    "\100\001\002\000\006\031\uffac\047\272\001\002\000\004" +
    "\031\345\001\002\000\014\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\030\uffdc\001\002\000\004\031\347\001\002\000\014" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd\001\002\000" +
    "\006\032\024\074\021\001\002\000\074\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb" +
    "\026\ufffb\027\ufffb\032\ufffb\035\ufffb\040\ufffb\041\ufffb\044" +
    "\ufffb\045\ufffb\057\ufffb\060\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\001\002\000\006\023\ufff3\024\ufff3\001\002\000" +
    "\016\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\030\uffda" +
    "\001\002\000\040\020\056\021\066\026\355\032\075\035" +
    "\055\040\076\041\124\044\105\045\057\057\065\060\121" +
    "\074\021\075\106\076\116\077\100\001\002\000\040\020" +
    "\056\021\066\026\355\032\075\035\055\040\076\041\124" +
    "\044\105\045\057\057\065\060\121\074\021\075\106\076" +
    "\116\077\100\001\002\000\010\023\ufff0\024\ufff0\027\ufff0" +
    "\001\002\000\006\023\ufff1\024\ufff1\001\002\000\006\024" +
    "\362\027\363\001\002\000\006\024\uffee\027\uffee\001\002" +
    "\000\040\020\056\021\066\026\355\032\075\035\055\040" +
    "\076\041\124\044\105\045\057\057\065\060\121\074\021" +
    "\075\106\076\116\077\100\001\002\000\010\023\uffef\024" +
    "\uffef\027\uffef\001\002\000\006\024\uffed\027\uffed\001\002" +
    "\000\014\022\uffe7\023\uffe7\026\u0102\032\uffe7\074\uffe7\001" +
    "\002\000\014\004\012\005\015\006\004\007\011\010\010" +
    "\001\002\000\016\004\012\005\015\006\004\007\011\010" +
    "\010\027\376\001\002\000\006\032\024\074\021\001\002" +
    "\000\006\023\ufff6\024\ufff6\001\002\000\006\023\374\024" +
    "\373\001\002\000\006\032\024\074\021\001\002\000\016" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\027\uffe6\001" +
    "\002\000\006\023\ufff5\024\ufff5\001\002\000\012\022\uffe9" +
    "\023\uffe9\032\uffe9\074\uffe9\001\002\000\006\032\024\074" +
    "\021\001\002\000\006\023\u0101\024\373\001\002\000\016" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\027\uffe5\001" +
    "\002\000\014\004\012\005\015\006\004\007\011\010\010" +
    "\001\002\000\016\004\012\005\015\006\004\007\011\010" +
    "\010\027\u0104\001\002\000\012\022\uffe8\023\uffe8\032\uffe8" +
    "\074\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\014\002\013\003\005\004\006\012\012\013" +
    "\004\001\001\000\002\001\001\000\004\065\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\026\010\024" +
    "\015\021\016\027\065\022\001\001\000\012\003\015\004" +
    "\016\012\012\013\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\352" +
    "\065\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\031\001\001\000\044\030\345" +
    "\031\342\032\102\033\107\034\061\035\106\036\060\040" +
    "\121\042\103\044\043\046\113\050\063\052\125\053\122" +
    "\054\101\057\053\065\052\001\001\000\002\001\001\000" +
    "\012\005\036\012\035\013\004\014\034\001\001\000\004" +
    "\021\340\001\001\000\002\001\001\000\010\015\337\016" +
    "\223\065\022\001\001\000\002\001\001\000\010\012\035" +
    "\013\004\014\336\001\001\000\004\021\041\001\001\000" +
    "\002\001\001\000\074\003\117\012\073\013\004\017\070" +
    "\020\114\021\050\022\044\023\045\024\076\025\067\026" +
    "\110\031\057\032\102\033\107\034\061\035\106\036\060" +
    "\040\121\042\103\044\043\046\113\050\063\052\072\053" +
    "\122\054\101\057\053\063\062\064\116\065\052\001\001" +
    "\000\004\045\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\052\273\053\122\054\101\057\053" +
    "\065\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\174\001\001\000\002\001\001\000\072\003\267" +
    "\012\073\013\004\017\070\020\114\021\050\022\044\023" +
    "\045\024\076\025\067\026\110\031\057\032\102\033\107" +
    "\034\061\035\106\036\060\040\121\042\103\044\043\046" +
    "\113\050\063\052\072\053\122\054\101\057\053\064\266" +
    "\065\052\001\001\000\002\001\001\000\014\052\264\053" +
    "\122\054\101\057\053\065\052\001\001\000\054\012\257" +
    "\013\004\025\153\026\110\031\057\032\102\033\107\034" +
    "\061\035\106\036\060\040\121\042\103\044\043\046\113" +
    "\050\063\051\260\052\072\053\122\054\101\057\053\065" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\025\246\026\110\031\057\032\102\033" +
    "\107\034\061\035\106\036\060\040\121\042\103\044\043" +
    "\046\113\050\063\052\072\053\122\054\101\057\053\065" +
    "\052\001\001\000\004\027\237\001\001\000\014\007\026" +
    "\010\024\015\021\016\223\065\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\206\001\001\000\002\001" +
    "\001\000\004\043\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\017" +
    "\157\020\114\021\050\022\044\023\045\024\076\025\067" +
    "\026\110\031\057\032\102\033\107\034\061\035\106\036" +
    "\060\040\121\042\103\044\043\046\113\050\063\052\072" +
    "\053\122\054\101\057\053\065\052\001\001\000\002\001" +
    "\001\000\014\052\151\053\122\054\101\057\053\065\052" +
    "\001\001\000\004\041\130\001\001\000\016\050\124\052" +
    "\125\053\122\054\101\057\053\065\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\042\133\044\043\046\113" +
    "\050\063\052\125\053\122\054\101\057\053\065\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\135" +
    "\001\001\000\002\001\001\000\022\044\137\046\113\050" +
    "\063\052\125\053\122\054\101\057\053\065\052\001\001" +
    "\000\002\001\001\000\004\045\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\046\143\050\063\052\125" +
    "\053\122\054\101\057\053\065\052\001\001\000\004\047" +
    "\145\001\001\000\002\001\001\000\016\050\150\052\125" +
    "\053\122\054\101\057\053\065\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\025\153\026\110\031\057\032\102\033\107\034" +
    "\061\035\106\036\060\040\121\042\103\044\043\046\113" +
    "\050\063\052\072\053\122\054\101\057\053\065\052\001" +
    "\001\000\002\001\001\000\044\026\156\031\057\032\102" +
    "\033\107\034\061\035\106\036\060\040\121\042\103\044" +
    "\043\046\113\050\063\052\072\053\122\054\101\057\053" +
    "\065\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\025\162\026\110" +
    "\031\057\032\102\033\107\034\061\035\106\036\060\040" +
    "\121\042\103\044\043\046\113\050\063\052\072\053\122" +
    "\054\101\057\053\065\052\001\001\000\002\001\001\000" +
    "\062\017\164\020\114\021\050\022\044\023\045\024\076" +
    "\025\067\026\110\031\057\032\102\033\107\034\061\035" +
    "\106\036\060\040\121\042\103\044\043\046\113\050\063" +
    "\052\072\053\122\054\101\057\053\065\052\001\001\000" +
    "\002\001\001\000\034\034\166\035\106\036\060\040\121" +
    "\042\103\044\043\046\113\050\063\052\125\053\122\054" +
    "\101\057\053\065\052\001\001\000\002\001\001\000\032" +
    "\035\170\036\060\040\121\042\103\044\043\046\113\050" +
    "\063\052\125\053\122\054\101\057\053\065\052\001\001" +
    "\000\002\001\001\000\030\036\172\040\121\042\103\044" +
    "\043\046\113\050\063\052\125\053\122\054\101\057\053" +
    "\065\052\001\001\000\004\037\174\001\001\000\002\001" +
    "\001\000\026\040\176\042\103\044\043\046\113\050\063" +
    "\052\125\053\122\054\101\057\053\065\052\001\001\000" +
    "\002\001\001\000\004\041\130\001\001\000\036\033\200" +
    "\034\061\035\106\036\060\040\121\042\103\044\043\046" +
    "\113\050\063\052\125\053\122\054\101\057\053\065\052" +
    "\001\001\000\002\001\001\000\046\025\220\026\110\031" +
    "\057\032\102\033\107\034\061\035\106\036\060\040\121" +
    "\042\103\044\043\046\113\050\063\052\072\053\122\054" +
    "\101\057\053\065\052\001\001\000\002\001\001\000\004" +
    "\065\217\001\001\000\002\001\001\000\046\026\211\031" +
    "\057\032\102\033\107\034\061\035\106\036\060\040\121" +
    "\042\103\044\043\046\113\050\063\052\072\053\122\054" +
    "\101\056\213\057\053\065\052\001\001\000\002\001\001" +
    "\000\004\065\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\026\216" +
    "\031\057\032\102\033\107\034\061\035\106\036\060\040" +
    "\121\042\103\044\043\046\113\050\063\052\072\053\122" +
    "\054\101\057\053\065\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\031\001\001\000" +
    "\012\005\226\012\035\013\004\014\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\026\244\031\057\032\102\033\107\034\061\035\106" +
    "\036\060\040\121\042\103\044\043\046\113\050\063\052" +
    "\072\053\122\054\101\057\053\065\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\025\252\026" +
    "\110\031\057\032\102\033\107\034\061\035\106\036\060" +
    "\040\121\042\103\044\043\046\113\050\063\052\072\053" +
    "\122\054\101\057\053\065\052\001\001\000\002\001\001" +
    "\000\062\017\254\020\114\021\050\022\044\023\045\024" +
    "\076\025\067\026\110\031\057\032\102\033\107\034\061" +
    "\035\106\036\060\040\121\042\103\044\043\046\113\050" +
    "\063\052\072\053\122\054\101\057\053\065\052\001\001" +
    "\000\002\001\001\000\062\017\256\020\114\021\050\022" +
    "\044\023\045\024\076\025\067\026\110\031\057\032\102" +
    "\033\107\034\061\035\106\036\060\040\121\042\103\044" +
    "\043\046\113\050\063\052\072\053\122\054\101\057\053" +
    "\065\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\050\263\052\125" +
    "\053\122\054\101\057\053\065\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\017\157" +
    "\020\114\021\050\022\044\023\045\024\076\025\067\026" +
    "\110\031\057\032\102\033\107\034\061\035\106\036\060" +
    "\040\121\042\103\044\043\046\113\050\063\052\072\053" +
    "\122\054\101\057\053\065\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\032\272\033\107\034\061\035" +
    "\106\036\060\040\121\042\103\044\043\046\113\050\063" +
    "\052\125\053\122\054\101\057\053\065\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\012\257\013\004" +
    "\025\153\026\110\031\057\032\102\033\107\034\061\035" +
    "\106\036\060\040\121\042\103\044\043\046\113\050\063" +
    "\051\275\052\072\053\122\054\101\057\053\065\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\025\301" +
    "\026\110\031\057\032\102\033\107\034\061\035\106\036" +
    "\060\040\121\042\103\044\043\046\113\050\063\052\072" +
    "\053\122\054\101\057\053\065\052\001\001\000\046\025" +
    "\321\026\110\031\057\032\102\033\107\034\061\035\106" +
    "\036\060\040\121\042\103\044\043\046\113\050\063\052" +
    "\072\053\122\054\101\057\053\065\052\001\001\000\002" +
    "\001\001\000\046\025\304\026\110\031\057\032\102\033" +
    "\107\034\061\035\106\036\060\040\121\042\103\044\043" +
    "\046\113\050\063\052\072\053\122\054\101\057\053\065" +
    "\052\001\001\000\046\025\314\026\110\031\057\032\102" +
    "\033\107\034\061\035\106\036\060\040\121\042\103\044" +
    "\043\046\113\050\063\052\072\053\122\054\101\057\053" +
    "\065\052\001\001\000\002\001\001\000\046\025\307\026" +
    "\110\031\057\032\102\033\107\034\061\035\106\036\060" +
    "\040\121\042\103\044\043\046\113\050\063\052\072\053" +
    "\122\054\101\057\053\065\052\001\001\000\062\017\312" +
    "\020\114\021\050\022\044\023\045\024\076\025\067\026" +
    "\110\031\057\032\102\033\107\034\061\035\106\036\060" +
    "\040\121\042\103\044\043\046\113\050\063\052\072\053" +
    "\122\054\101\057\053\065\052\001\001\000\002\001\001" +
    "\000\062\017\311\020\114\021\050\022\044\023\045\024" +
    "\076\025\067\026\110\031\057\032\102\033\107\034\061" +
    "\035\106\036\060\040\121\042\103\044\043\046\113\050" +
    "\063\052\072\053\122\054\101\057\053\065\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\017\317\020" +
    "\114\021\050\022\044\023\045\024\076\025\067\026\110" +
    "\031\057\032\102\033\107\034\061\035\106\036\060\040" +
    "\121\042\103\044\043\046\113\050\063\052\072\053\122" +
    "\054\101\057\053\065\052\001\001\000\002\001\001\000" +
    "\062\017\316\020\114\021\050\022\044\023\045\024\076" +
    "\025\067\026\110\031\057\032\102\033\107\034\061\035" +
    "\106\036\060\040\121\042\103\044\043\046\113\050\063" +
    "\052\072\053\122\054\101\057\053\065\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\025\331\026\110" +
    "\031\057\032\102\033\107\034\061\035\106\036\060\040" +
    "\121\042\103\044\043\046\113\050\063\052\072\053\122" +
    "\054\101\057\053\065\052\001\001\000\002\001\001\000" +
    "\046\025\324\026\110\031\057\032\102\033\107\034\061" +
    "\035\106\036\060\040\121\042\103\044\043\046\113\050" +
    "\063\052\072\053\122\054\101\057\053\065\052\001\001" +
    "\000\062\017\327\020\114\021\050\022\044\023\045\024" +
    "\076\025\067\026\110\031\057\032\102\033\107\034\061" +
    "\035\106\036\060\040\121\042\103\044\043\046\113\050" +
    "\063\052\072\053\122\054\101\057\053\065\052\001\001" +
    "\000\002\001\001\000\062\017\326\020\114\021\050\022" +
    "\044\023\045\024\076\025\067\026\110\031\057\032\102" +
    "\033\107\034\061\035\106\036\060\040\121\042\103\044" +
    "\043\046\113\050\063\052\072\053\122\054\101\057\053" +
    "\065\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\017\334\020\114\021\050\022\044\023\045\024\076" +
    "\025\067\026\110\031\057\032\102\033\107\034\061\035" +
    "\106\036\060\040\121\042\103\044\043\046\113\050\063" +
    "\052\072\053\122\054\101\057\053\065\052\001\001\000" +
    "\002\001\001\000\062\017\333\020\114\021\050\022\044" +
    "\023\045\024\076\025\067\026\110\031\057\032\102\033" +
    "\107\034\061\035\106\036\060\040\121\042\103\044\043" +
    "\046\113\050\063\052\072\053\122\054\101\057\053\065" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\030\343\031\342\032\102\033\107\034\061" +
    "\035\106\036\060\040\121\042\103\044\043\046\113\050" +
    "\063\052\125\053\122\054\101\057\053\065\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\351\015\021" +
    "\016\223\065\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\011\356\026\355\031\057" +
    "\032\102\033\107\034\061\035\106\036\060\040\121\042" +
    "\103\044\043\046\113\050\063\052\072\053\122\054\101" +
    "\057\053\065\052\001\001\000\050\011\360\026\355\031" +
    "\057\032\102\033\107\034\061\035\106\036\060\040\121" +
    "\042\103\044\043\046\113\050\063\052\072\053\122\054" +
    "\101\057\053\060\357\065\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\011\363\026\355\031\057\032\102\033\107\034\061" +
    "\035\106\036\060\040\121\042\103\044\043\046\113\050" +
    "\063\052\072\053\122\054\101\057\053\065\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\367\013\004\061\366\001\001\000\006\012\376" +
    "\013\004\001\001\000\012\006\371\015\370\016\223\065" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\374\016\223\065\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\377\015\370" +
    "\016\223\065\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\367\013\004\061\u0102\001\001\000\006" +
    "\012\376\013\004\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // root ::= declaration 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.ROOT, "root",  l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= root EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // root ::= function_definition 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.ROOT, "root", l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // root ::= root declaration 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.Insert(r); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // root ::= root function_definition 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.Insert(r); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= type_specifier SEMI 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.DECLARATION, "declaration", l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= type_specifier init_declarators SEMI 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.DECLARATION, "declaration", l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_definition ::= type_specifier plain_declarator LPA RPA compound_statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.FUNCTION_DEFINITION, "function_definition", a, b, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_definition ::= type_specifier plain_declarator LPA parameters RPA compound_statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.FUNCTION_DEFINITION, "function_definition", a, b, c, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameters ::= plain_declaration 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Node(NodeType.PARAMETERS, "parameters", l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameters ::= parameters COMMA plain_declaration 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 t.Insert(l); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarators ::= declarator 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.DECLARATORS, "declarators", l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarators",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarators ::= declarators COMMA declarator 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 t.Insert(l); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarators",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // init_declarators ::= init_declarator 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.INIT_DECLARATORS, "init_declarators", l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // init_declarators ::= init_declarators COMMA init_declarator 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 t.Insert(l); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // init_declarator ::= declarator 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.INIT_DECLARATOR, "init_declarator", l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarator",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // init_declarator ::= declarator EVA initializer 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.INIT_DECLARATOR, "init_declarator = ", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_declarator",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // initializer ::= assignment_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initializer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // initializer ::= LCU t_initializer RCU 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.INITIALIZER, "initializer {}", c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initializer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // t_initializer ::= initializer 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.INITIALIZER, "initializers", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_initializer",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // t_initializer ::= t_initializer COMMA initializer 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.Insert(a); RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_initializer",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_specifier ::= VOID 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.KEYWORDS, "voidType"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_specifier ::= CHAR 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.KEYWORDS, "charType"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_specifier ::= INT 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.KEYWORDS, "intType"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_specifier ::= struct_or_union LCU t_type_specifier RCU 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.TYPE_SPECIFIER, "type_specifier {}",b, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_specifier ::= struct_or_union identifier LCU t_type_specifier RCU 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.TYPE_SPECIFIER, "type_specifier identifier {}", b, s, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_specifier ::= struct_or_union identifier 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.TYPE_SPECIFIER, "type_specifier", b, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // t_type_specifier ::= type_specifier declarators SEMI 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.TYPE_SPECIFIERS, "type_specifiers", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_type_specifier",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // t_type_specifier ::= t_type_specifier type_specifier declarators SEMI 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 t.Insert(new Node(NodeType.TYPE_SPECIFIERS, "type_specifiers", a, b)); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_type_specifier",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struct_or_union ::= STRUCT 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.KEYWORDS, "struct"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struct_or_union ::= UNION 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.KEYWORDS, "union"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // plain_declaration ::= type_specifier declarator 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.PLAIN_DECLARATION, "plain_declaration", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarator ::= plain_declarator LPA RPA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Node(NodeType.DECLARATOR, "declarator ()", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declarator ::= plain_declarator LPA parameters RPA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.DECLARATOR, "declarator ()", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declarator ::= plain_declarator 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.DECLARATOR, "declarator", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarator ::= plain_declarator t_declarator 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.DECLARATOR, "declarator", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // t_declarator ::= LSQ constant_expression RSQ 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.DECLARATOR, "declarators []", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_declarator",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // t_declarator ::= t_declarator LSQ constant_expression RSQ 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.DECLARATOR, "declarators []", b, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_declarator",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // plain_declarator ::= identifier 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // plain_declarator ::= MUL plain_declarator 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.PLAIN_DECLARATOR, "plain_declarator *", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= expression_statement 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= selection_statement 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= compound_statement 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= iteration_statement 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= jump_statement 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression_statement ::= SEMI 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.EXPRESSION_STATEMENT, "expression_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression_statement ::= expression SEMI 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // compound_statement ::= LCU RCU 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.COMPOUND_STATEMENT, "compound_statement {}"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // compound_statement ::= LCU t_declaration RCU 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.COMPOUND_STATEMENT, "compound_statement {}", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // compound_statement ::= LCU t_statement RCU 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.COMPOUND_STATEMENT, "compound_statement {}", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // compound_statement ::= LCU t_declaration t_statement RCU 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.COMPOUND_STATEMENT, "compound_statement {}", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // t_declaration ::= declaration 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.DECLARATION, "declarations", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_declaration",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // t_declaration ::= t_declaration declaration 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.Insert(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_declaration",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // t_statement ::= statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.STATEMENT, "statement", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_statement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // t_statement ::= t_statement statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.Insert(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_statement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // selection_statement ::= IF LPA expression RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node (NodeType.SELECTION_STATEMENT, "selection_statement if", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // selection_statement ::= IF LPA expression RPA statement ELSE statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node (NodeType.SELECTION_STATEMENT, "selection_statement if else", a, b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // iteration_statement ::= WHILE LPA expression RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.ITERATION_STATEMENT, "while()", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // iteration_statement ::= FOR LPA SEMI SEMI RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Node(NodeType.ITERATION_STATEMENT, "for(;;)", a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // iteration_statement ::= FOR LPA SEMI SEMI expression RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Node(NodeType.ITERATION_STATEMENT, "for(;;*)", a, b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // iteration_statement ::= FOR LPA SEMI expression SEMI RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Node(NodeType.ITERATION_STATEMENT, "for(;*;)", a, b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // iteration_statement ::= FOR LPA SEMI expression SEMI expression RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Node(NodeType.ITERATION_STATEMENT, "for(;*;*)", a, b, c);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // iteration_statement ::= FOR LPA expression SEMI SEMI RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Node(NodeType.ITERATION_STATEMENT, "for(*;;)", a, b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // iteration_statement ::= FOR LPA expression SEMI SEMI expression RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Node(NodeType.ITERATION_STATEMENT, "for(*;;*)", a, b, c);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // iteration_statement ::= FOR LPA expression SEMI expression SEMI RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Node(NodeType.ITERATION_STATEMENT, "for(*;*;)", a, b, c);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iteration_statement ::= FOR LPA expression SEMI expression SEMI expression RPA statement 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Node(NodeType.ITERATION_STATEMENT, "for(*;*;*)", a, b, c, d);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // jump_statement ::= CONTINUE SEMI 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.JUMP_STATEMENT, "jump_statement", new Node(NodeType.CONTINUE, "continue")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // jump_statement ::= BREAK SEMI 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.JUMP_STATEMENT, "jump_statement", new Node(NodeType.BREAK, "break")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // jump_statement ::= RETURN SEMI 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.JUMP_STATEMENT, "jump_statement", new Node(NodeType.RETURN, "return")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // jump_statement ::= RETURN expression SEMI 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.JUMP_STATEMENT, "jump_statement", new Node(NodeType.RETURN, "return"), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= assignment_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.EXPRESSION, "expression", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression COMMA assignment_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.EXPRESSION, "expression", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_expression ::= logical_or_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.ASSIGN_EXPRESSION, "assignment_expression", a, b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_operator ::= EVA 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_operator ::= MUL_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "*="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_operator ::= DIV_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "/="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_operator ::= MOD_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "%="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_operator ::= ADD_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "+="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment_operator ::= SUB_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "-="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_operator ::= SHL_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "<<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_operator ::= SHR_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, ">>="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment_operator ::= AND_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "&="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment_operator ::= XOR_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "^="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment_operator ::= OR_ASSIGN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "|="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // constant_expression ::= logical_or_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // logical_or_expression ::= logical_and_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // logical_or_expression ::= logical_or_expression OR_L logical_and_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.LOGICAL_OR_EXPRESSION, "logical_or_expression ||", a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // logical_and_expression ::= inclusive_or_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logical_and_expression ::= logical_and_expression AND_L inclusive_or_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.LOGICAL_AND_EXPRESSION, "logical_and_expression &&", a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.INCLUSIVE_OR_EXPRESSION, "inclusive_or_expression or", a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exclusive_or_expression ::= and_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.EXCLUSIVE_OR_EXPRESSION, "exclusive_or_expression xor", a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // and_expression ::= equality_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // and_expression ::= and_expression AND equality_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.AND_EXPRESSION, "and_expression and", a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // equality_expression ::= relational_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // equality_expression ::= equality_expression equality_operator relational_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.EQUALITY_EXPRESSION, "equality_expression", a, b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // equality_operator ::= EQ 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_operator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // equality_operator ::= NE 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_operator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // relational_expression ::= shift_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // relational_expression ::= relational_expression relational_operator shift_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.RELATIONAL_EXPRESSION, "relational_expression", a, b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relational_operator ::= LT 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // relational_operator ::= GT 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relational_operator ::= LE 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relational_operator ::= GE 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // shift_expression ::= additive_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // shift_expression ::= shift_expression shift_operator additive_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.SHIFT_EXPRESSION, "shift_expression", a, b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // shift_operator ::= SHL 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "<<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_operator",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // shift_operator ::= SHR 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, ">>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_operator",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // additive_expression ::= multiplicative_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // additive_expression ::= additive_expression additive_operator multiplicative_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.ADDITIVE_EXPRESSION, "additive_expression", a, b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // additive_operator ::= ADD 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_operator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // additive_operator ::= SUB 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_operator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // multiplicative_expression ::= cast_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // multiplicative_expression ::= multiplicative_expression multiplicative_operator cast_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.MULTIPLICATIVE_EXPRESSION, "multiplicative_expression", a, b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // multiplicative_operator ::= MUL 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // multiplicative_operator ::= DIV 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // multiplicative_operator ::= MOD 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.OPERATOR, "%"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cast_expression ::= unary_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast_expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cast_expression ::= LPA type_name RPA cast_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.CAST_EXPRESSION, "cast_expression ()", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast_expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // type_name ::= type_specifier 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.TYPE_NAME, "type_name", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // type_name ::= type_name MUL 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.TYPE_NAME, "type_name", new Node(NodeType.OPERATOR, "*")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unary_expression ::= postfix_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unary_expression ::= INC unary_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.UNARY_EXPRESSION, "unary_expression", new Node(NodeType.OPERATOR, "++"), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unary_expression ::= DEC unary_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.UNARY_EXPRESSION, "unary_expression", new Node(NodeType.OPERATOR, "--"), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unary_expression ::= unary_operator cast_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.UNARY_EXPRESSION, "unary_expression", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unary_expression ::= SIZEOF unary_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.UNARY_EXPRESSION, "unary_expression", new Node(NodeType.OPERATOR, "sizeof"), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unary_expression ::= SIZEOF LPA type_name RPA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.UNARY_EXPRESSION, "unary_expression()", new Node(NodeType.OPERATOR, "sizeof"), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unary_operator ::= AND 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.UNARY_OPERATOR, "&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unary_operator ::= MUL 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.UNARY_OPERATOR, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unary_operator ::= ADD 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.UNARY_OPERATOR, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unary_operator ::= SUB 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.UNARY_OPERATOR, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unary_operator ::= COM 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.UNARY_OPERATOR, "~"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unary_operator ::= NOT 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.UNARY_OPERATOR, "!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // postfix_expression ::= primary_expression 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // postfix_expression ::= postfix_expression postfix 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.POSTFIX_EXPRESSION, "postfix_expression", a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // postfix ::= LSQ expression RSQ 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.POSTFIX, "postfix []", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // postfix ::= LPA RPA 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.POSTFIX, "postfix ()"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // postfix ::= LPA arguments RPA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.POSTFIX, "postfix ()", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // postfix ::= DOT identifier 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.POSTFIX, "postfix .", new Node(NodeType.OPERATOR, ".")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // postfix ::= PTR identifier 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.POSTFIX, "postfix ->", new Node(NodeType.OPERATOR, "->")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // postfix ::= INC 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.POSTFIX, "postfix []", new Node(NodeType.OPERATOR, "++")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // postfix ::= DEC 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.POSTFIX, "postfix []", new Node(NodeType.OPERATOR, "--")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arguments ::= assignment_expression 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.ARGUMENTS, "arguments", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arguments ::= arguments COMMA assignment_expression 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.Insert(a);RESULT = b;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // primary_expression ::= identifier 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // primary_expression ::= CONSTINT 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.INTEGER_CONSTANT, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // primary_expression ::= CONSTCHAR 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.CHARACTER_CONSTANT, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // primary_expression ::= CONSTSTR 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.STRING_CONSTANT, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // primary_expression ::= LPA expression RPA 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(NodeType.PRIMARY_EXPRESSION, "primary_expression ()", t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // identifier ::= ID 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(NodeType.IDENTIFIER, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
